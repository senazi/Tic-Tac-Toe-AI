#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
char choice;
char place[3];
int i;
int test=1;
int j;
int a;
char bot;
char xo[4][4] = {
                         "   ",
                         "   ",
                         "   "
                     };
                    

int check(char xo[4][4],char direction,char choice,int a, int b) {   //used in check_sorw function 
    int final=-1;
    if (direction=='v'){
   if ((xo[a][b]==choice)&&(xo[a+1][b]==choice)&&(xo[a+2][b]==' ')){
       final=(a+2);
   }
   else if ((xo[a][b]==choice)&&(xo[a+2][b]==choice)&&(xo[a+1][b]==' ')){
       final=(a+1);
   } 
   else if ((xo[a+1][b]==choice)&&(xo[a+2][b]==choice)&&(xo[a][b]==' ')){
       final=(a);
   } 
   
   }
   else if (direction=='h')
   {
       if ((xo[a][b]==choice)&&(xo[a][b+1]==choice)&&(xo[a][b+2]==' ')){
       final=(b+2);
   }
   else if ((xo[a][b]==choice)&&(xo[a][b+2]==choice)&&(xo[a][b+1]==' ')){
       final=(b+1);
   } 
   else if ((xo[a][b+1]==choice)&&(xo[a][b+2]==choice)&&(xo[a][b]==' ')){
       final=(b);
   } 
   }
   else if (direction=='l'){ //principal diagonal (top left to bottom right and vice versa)
       if ((xo[0][0]==choice)&&(xo[1][1]==choice)&&(xo[2][2]==' ')){
       final=22;
   }
   else if ((xo[0][0]==choice)&&(xo[2][2]==choice)&&(xo[1][1]==' ')){
       final=11;
   } 
   else if ((xo[1][1]==choice)&&(xo[2][2]==choice)&&(xo[0][0]==' ')){
       final=0;
   } 
   }else if (direction=='r'){ //secondary diagonal (top right to bottom left and vise versa)
       if ((xo[1][1]==choice)&&(xo[2][0]==choice)&&(xo[0][2]==' ')){
       final=2;
   }else if ((xo[2][0]==choice)&&(xo[0][2]==choice)&&(xo[1][1]==' ')){
       final=11;
   }else if ((xo[1][1]==choice)&&(xo[0][2]==choice)&&(xo[2][0]==' ')){
       final=20;
   } 
   }
      
   return(final);
} 
int check_sorw(char xo[4][4],char choice){  // devided this into two functions to make it easier to read
     if (check(xo,'v',choice,0,0)!=-1){      
        return(check(xo,'v',choice,0,0))*10;
    }else if(check(xo,'v',choice,0,1)!=-1){
        return(check(xo,'v',choice,0,1))*10+1;
    }else if(check(xo,'v',choice,0,2)!=-1){
        return(check(xo,'v',choice,0,2))*10+2;
    }else if(check(xo,'h',choice,0,0)!=-1){
        return(check(xo,'h',choice,0,0));
    }else if(check(xo,'h',choice,2,0)!=-1){
       return(check(xo,'h',choice,2,0))+20;
    }else if(check(xo,'h',choice,1,0)!=-1){
        return(check(xo,'h',choice,1,0))+10;
    }else if(check(xo,'l',choice,0,0)!=-1){
        return(check(xo,'l',choice,0,0));
    }else if(check(xo,'r',choice,0,2)!=-1){
        return(check(xo,'r',choice,0,2));
}
else{
    return(-1);
}
} 



int max(int t[],int k){  // gives maximun value of table 
    int i=0;
    int m=t[0];
    for(i=0;i<k;i++){
        if (t[i]>m){
            m=t[i];
        }
    }
    return m;
}

int min(int t[],int k){  // gives minimum value of table 
    int i=0;
    int m=t[0];
    for(i=0;i<k;i++){
        if (t[i]<m){
            m=t[i];
        }
    }
    return m;
}



int fill(char xo[4][4],char bot,char user){
    
    char a[4][4];
    
    for(i=0;i<3;i++){ // copying the original matrix
        for(j=0;j<3;j++){
            a[i][j]=xo[i][j];
        }
    }
    int k=0; // counter of empty boxes
    int i,j,d;
    for(i=0;i<3;i++){  // finding who's turn it is (bot or user)
        for(j=0;j<3;j++){
            if (a[i][j]==' '){
                k=k+1;
            }
        }
    }
    
     if(k==0){  // stop condition: full matrix( case of draw)
     
     return 100;
    
    }else if (k%2==0){    // bot's turn
      if(check_sorw(a,bot)!=-1){    //check if bot can win 
          return check_sorw(a,bot)+1000;
      } else if (check_sorw(a,user)!=-1){ //check if user can win
           k=check_sorw(a,user);
           a[k/10][k%10]=bot;
           d=((fill(a,bot,user)/100)*100);
          if(d<0){
       return -k+d;
       }else{
        return k+d; }

          
      }else{
          int t[k]; // contains all the possibilities and their best possible results
          for(i=0;i<k;i++){ //filling the table with -2000
     t[i]=-2000;
    } 
          
          k=0; 
    for(i=0;i<3;i++){
        for(j=0;j<3;j++){
        if (a[i][j]==' '){
            a[i][j]=bot;
            d=((fill(a,bot,user)/100)*100);
            a[i][j]=' ';
           if(d<0){
            t[k]=-(i*10)-j+d;
            }else{
            t[k]=(i*10)+j+d;
              }
            k=k+1;
  
        }
    }
    }
     return max(t,k);
    }
    }else{
     
     
   // user's turn
      if(check_sorw(a,user)!=-1){ //check if user can win 
          return -1000;
      } else if (check_sorw(a,bot)!=-1){ //check if bot can win 
          k=check_sorw(a,bot);
          a[k/10][k%10]=user;
          return((fill(a,bot,user)/100)*100);
         
          
      }else{
           int t[k]; // contains all the possibilities and their best possible results
          for(i=0;i<k;i++){ //filling the table with 100 becase it will return the lowest value which will be 100 or less
     t[i]=100;
    } 
          k=0;
    for(i=0;i<3;i++){
        for(j=0;j<3;j++){
        if (a[i][j]==' '){
            a[i][j]=user;
            t[k]=((fill(a,bot,user)/100)*100);
            a[i][j]=' ';
            k=k+1;
             }
         }
      }
     return min(t,k);
       }
     }
}
void display(){
printf("     A    B    C\n");
printf("1    %c || %c || %c \n",xo[0][0],xo[0][1],xo[0][2]);
printf("   ===============\n");
printf("2    %c || %c || %c \n",xo[1][0],xo[1][1],xo[1][2]);
printf("   ===============\n");
printf("3    %c || %c || %c \n",xo[2][0],xo[2][1],xo[2][2]);
} //display
void placing(char choice){
      printf(" \n where would you place your %c ? \n\n\n",choice);
  display();
    int test=0;
while (test==0){  
	  test=1;
 printf("\n");
 scanf("%s", &place);
 if (strcmp(place,"A1")==0){
	 if (xo[0][0]==' '){
		 xo[0][0]=choice;
	 }else{printf("please pick an empty place");test=0;}
 } else if (strcmp(place,"A2")==0){
	if (xo[1][0]==' '){
		 xo[1][0]=choice;
 }else{printf("please pick an empty place");test=0;}
	 }
 else if (strcmp(place,"A3")==0){
	if (xo[2][0]==' '){
		 xo[2][0]=choice;
}else{printf("please pick an empty place");test=0;}
	 }
	 else if (strcmp(place,"B1")==0){
	if (xo[0][1]==' '){
		 xo[0][1]=choice;
   }else{printf("please pick an empty place");test=0;}
	 }
else if (strcmp(place,"B2")==0){
	if (xo[1][1]==' '){
		 xo[1][1]=choice;
   }else{printf("please pick an empty place");test=0;}
	 }
else if (strcmp(place,"B3")==0){
	if (xo[2][1]==' '){
		 xo[2][1]=choice;
   }else{printf("please pick an empty place");test=0;}
	 }
		 else if (strcmp(place,"C1")==0){
	if (xo[0][2]==' '){
		 xo[0][2]=choice;
   }else{printf("please pick an empty place");test=0;}
	 }
else if (strcmp(place,"C2")==0){
	if (xo[1][2]==' '){
		 xo[1][2]=choice;
   }else{printf("please pick an empty place");test=0;}
	 }
else if (strcmp(place,"C3")==0){
	if (xo[2][2]==' '){
		 xo[2][2]=choice;
   }else{printf("please pick an empty place");test=0;}
	 }
     else{
         printf("please make sure you type a valid place \n exemple:\"A3\" \n\n"); 
		 test=0;
 }
	 
 }
} 

int win(char mat[4][4],char player){  // returns position of empty spot betweet two spots for same player
    int i,j;
    int hply; // used to count the horizental ones 
    int vply;// used to count vertical ones
    for(i=0;i<3;i++){
        hply=0;vply=0;
        for(j=0;j<3;j++){
            if(mat[i][j]==player){ // checking lines 
                hply=hply+1;
            }
            
            if(mat[j][i]==player){  // checking columns
                vply=vply+1;
            }
        }
        if ((hply==3)||(vply==3)){
            break;
        }

    }
    if ((hply==3)||(vply==3)){
            return 1;
        }else {
        hply=0;vply=0;
        for(i=0;i<3;i++){ // checking second diagonal 
            if(mat[i][2-i]==player){ 
                hply=hply+1;
            }
        }
        for(i=0;i<3;i++){ // checking principal diagonal
            if(mat[i][i]==player){ 
                vply=vply+1;
            }
        }
        if ((hply==3)||(vply==3)){
            return 1;
        }else {
        return 0;
    }
        }
}

int full(char mat[4][4]){ // checks if all the spots are full 
    int i,j;
    int test=1;
    for(i=0;i<3;i++){
        for(j=0;j<3;j++){
            if(mat[i][j]==' '){
                test=0;
                break;
            }
            }
            if (!test){
                break;
            }
        }
        return test;
    }

int main() {
 while (test==1){        // picking X or O
        printf("Pick X or O\n");
        scanf(" %c", &choice);
        choice=toupper(choice);
        if ((choice=='X') || (choice=='O')){
            test=0;
        }
 }
	if(choice=='X'){
		bot='O';
		
	}else {
		bot='X';
	}
	
while (!(win(xo,bot) || full(xo)))
{
placing(choice);
system("clear");
a=fill(xo,bot,choice);
i=(a/10)%10;
j=a%10;
xo[i][j]=bot;
}
if (win(xo,bot)){
    display();
    printf("you loose !");
}else{
    display();
    printf("Draw !");
}
    return 0;
}